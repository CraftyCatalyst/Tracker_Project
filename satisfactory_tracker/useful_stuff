Troubleshoting:
    When installed packages aren't recognised:
        Check >Python Interpreter in Command Palette to make sure it's pointing to the right python installation.
    Issues with conflicting package versions:
        # This will blow away the node_modules directory, the package-lock.json file, and reinstall the all packages.
        # Make sure any dependencies on specific versions are updated in the package.json file.
        Remove-Item -Recurse -Force ./node_modules
        Remove-Item -Force ./package-lock.json
        npm install


Build & Run the Application:
    # IMPORTANT: Make sure you set the RUN_MODE variables in the .env file before proceding.
        # local - for local development on your machine
        # docker - for running the application in Docker
    # The scripts in package.json have been updated to start the client and server by calling npm start.
    # Make sure you've run npm install concurrently --save-dev 
    # This will start the flask server and the react server in watch mode and changes will be reflected in the browser in real-time.
    cd satisfactory_tracker # if not already in the directory
    ./venv/Scripts/activate # if not already in the virtual environment
    npm run build # Build the React app if needed.
    npm start # Start the servers. Ctrl C to stop the servers.
    # The Flask server and the served application built using npm build will be running at http://localhost:5000/
    # The development server will be running at http://localhost:3000/

Virtual environment:
    Set Up:
        # 1) Create the virtual environment
            python -m venv venv
        # 2) Activate the virtual environment
            # LINUX command to activate the virtual environment.
                source venv/bin/activate 
            # WINDOWS command to activate the virtual environment.
                ./venv/Scripts/activate
        # 3) Install the required pip packages
            # pip package installation
                pip install -r pip_requirements.txt
        # 4) Install the required npm packages
            # LINUX command to install the required packages.
                xargs -a npm_requirements.txt npm install 
            # WINDOWS command to install the required packages.
                Get-Content -Path npm_requirements.txt | ForEach-Object {npm install $_}
        
    Delete:
        # LINUX command to delete the virtual environment.
            rm -rf venv
        # WINDOWS command to delete the virtual environment.
            Remove-Item -Recurse -Force ./venv
        # Alternatively, you can manually delete the venv directory using File Explorer.
    Turn on virtual environment:
        # LINUX command to activate the virtual environment.
            source venv/bin/activate
        # WINDOWS command to activate the virtual environment.
            ./venv/Scripts/activate
    Turn off virtual environment:
        deactivate

Docker:
    docker-compose down # Stop the containers
    docker-compose build # Build the Docker images. Add --no-cache to build without using the cache (useful for debugging)
    docker-compose up # Start the containers. 
        # Add -d to start in detached mode. 
        # Add --build to build the images before starting the containers
        # Add --force-recreate to force the recreation of the containers
        # Add --remove-orphans to remove containers for services not defined in the Compose file
        # Add --renew-anon-volumes to recreate anonymous volumes instead of retrieving data from the previous containers
    Run the app image in a container:
        # replace image_name with the name of the image you want to run
            docker run -p 3000:3000 -p 5000:5000 -v "$(pwd):/app" -e FLASK_ENV=development -e NODE_ENV=development image_name npm start
    Useful commands:
        docker exec -it satisfactory_tracker-app-1 bash # Access the bash shell in the app container
        docker ps # Confirm the containers are running
        docker logs satisfactory_tracker-app-1 # Check for the Flask app
        docker debug satisfactory_tracker-app-1 # Debug the app container
        # How to tag a version of the image prior to pushing to docker hub
            docker image tag satisfactory_tracker waynen12/satisfactory_tracker:v0.3
        # How to push to docker hub
            docker image push waynen12/satisfactory_tracker:v0.3
        #remove all docker images 
            docker container rm -f $(docker container ls -aq)

npm commands:
    npm run build
    npm start # uses concurrently to start the both react and flask servers in the package.json scripts
    npm stop # stops the react server

Table Maintenance:
    # Run refresh_data.py in SQLite_stuff directory to delete all data and reload either a specific table or all tables.
    # Primary keys are reset to 0 when the data is reloaded. So you shouldn't need to reload foreign key data. But spot check to be sure.
    # Command line arguments as follows: all_tables, part, recipe, alternate_recipe, node_purity, miner_type, miner_supply, power_shards, data_validation
    # Or just copy and paste one of the following commands into the command line.
        python refresh_data.py all_tables # Refresh all the data from the Excel file
        python refresh_data.py part # Refresh the part data from the Excel file
        python refresh_data.py recipe # Refresh the recipe data from the Excel file
        python refresh_data.py alternate_recipe # Refresh the alternate recipe data from the Excel file
        python refresh_data.py node_purity # Refresh the node purity data from the Excel file
        python refresh_data.py miner_type # Refresh the miner type data from the Excel file
        python refresh_data.py miner_supply # Refresh the miner supply data from the Excel file
        python refresh_data.py power_shards # Refresh the power shards data from the Excel file
        python refresh_data.py data_validation # Refresh the data validation data from the Excel file
    # Note that the user table is not included. This is to prevent the loss of user data. If you need to refresh the user table, you will need to do it manually.

Flask Commands:
    Blow away the database and start over:
        # 1) Delete the database file.
            # LINUX command to remove the database.
                rm satisfactory_parts.db 
            # WINDOWS command to remove the database.
                del satisfactory_parts.db
            # Alternatively, you can manually delete the satisfactory_parts.db file using File Explorer.
        # 2) Recreate the database.
            flask db stamp head # Stamp the current migration.
            flask db migrate -m "your description" # Change the message as needed.
            
             migration.
        # 3) Migrate the data from the Excel file to the database.
            cd SQLite_stuff # if not already in the directory
            python -m SQLite_stuff.migrate_data # Migration script to move data from Excel to SQLite database.
Other Flask commands:
        flask db downgrade # Downgrade to the previous migration.
        flask db history # Show the migration history.
        flask db heads # Show the current migration.
        flask db stamp head # Stamp the current migration.

SQLite Installation Folder:
    F:/Programs/SQLite3/sqlite3.exe # Handy for me. Change path as needed.
SQLite commands:
    sqlite3 satisfactory_parts.db .dump > backup.sql # Backup the database. Preferably BEFORE you make massive changes! :P

Key files:
    General:
        /config.py # Configuration file for both the Flask and React apps *******
        /pip_requirements.txt # List of pip packages for the virtual environment 
        /npm_requirements.txt # List of npm packages for the React app
        /.env # Environment variables for the project 
        /useful_stuff # File containing useful information for the project
    SQLite:
        /satisfactory_tracker/SQLite_stuff/satisfactory_parts.db # Database file for the SQLite database
        /satisfactory_tracker/SQLite_stuff/Satifactory Parts Data v2.xlsx # Excel file containing the initial data
        /satisfactory_tracker/SQLite_stuff/migrate_data.py # Migration script for initial setup to move data from Excel to SQLite database.
        /satisfactory_tracker/SQLite_stuff/refresh_data.py # Script to delete all data and reload either a specific table or all tables.
        satisfactory_tracker/SQLite_stuff/create_db.py # Script to create the database
        satisfactory_tracker/SQLite_stuff/create_schema.py # Script to create the database schema
    Flask:
        /satisfactory_tracker/app/__init__.py # App initialization and configuration 
        /satisfactory_tracker/app/models.py # Database models and relationships *******
        /satisfactory_tracker/app/routes.py # Routes and views *******
        satisfactory_tracker/app/build_tree.py # Script to build the dependency tree
    React:        
        /satisfactory_tracker/src/pages/LoginPage.js # Login Page 
        satisfactory_tracker/src/pages/SignupPage.js # Signup Page
        /satisfactory_tracker/src/pages/HomePage.js # Home Page
        /satisfactory_tracker/src/pages/DataManagementPage.js # Data Management Page *******
        /satisfactory_tracker/src/pages/EditModal.js # Edit Modal form *******
        /satisfactory_tracker/src/pages/DependencyTreePage.js # Dependency Tree Page *******        
        /satisfactory_tracker/src/services/api.js # API service *******
        /satisfactory_tracker/App.js # Main App component *******
        /satisfactory_tracker/src/theme/theme.js # Theme file *******
        /satisfactory_tracker/package.json # Package file *******
        satisfactory_tracker/src/apiConfig.js # API configuration file
    Docker:
        /satisfactory_tracker/Dockerfile # Dockerfile *******
        /satisfactory_tracker/docker-compose.yml # Docker Compose file for the Flask and React apps *******


    Other Files:
        /run_app.py # Script to activate the virtual environment, build the React app, start the Flask app, and open the browser to the React app.

Code stuff:
    formatting of TODOs:
        #TODO:

Project relative paths:
    /satisfactory_tracker/
    /satisfactory_tracker/SQLite_stuff
    /satisfactory_tracker/excel_stuff

Visual Studio:
    # Exclude venv and node_modules from search. Copy into the files to exclude text box in the search tab.
        satisfactory_tracker/venv/**/, satisfactory_tracker/node_modules/**/
        
Copilot:
    - copilot-debug python filename.py # Debug a file using copilot-debug
    - By typing # followed by a symbol, function_name, class_name etc... you'll get suggestions for that type from files you've recently worked on.
    To reference symbols across your entire project, you can use #sym to open a global symbols picker.
    Folders can now be added as context by dragging them from the Explorer, Breadcrumbs, or other views into Copilot Chat.
        - When a folder is dragged into Copilot Edits, all files within the folder are included in the working set.
    - Copilot usage graph
        - VS Code extensions can use the VS Code API to build on the capabilities of Copilot. You can now see a graph of an extension's Copilot usage in the Runtime Status view. This graph shows the number of chat requests that were made by the extension over the last 30 days.
            - The graph is available for extensions that have been granted the copilot.usage permission in their extension manifest.
    Ctrl + Shift + L - Multi-select

#TODO:
    IN PROGRESS:
        - Set up laptop
        - Implement Data Validation on EditModal
            - Implement the data validation on the EditModal for edit and create modes.
                # - Get valid values from data_validation table.
                # - Get values for foreign key constraints
                # - Change parts and recipes tables to 'part' and 'recipe' for consistency.
    PENDING:
        - Update build_tree to take alternate recipes into account.
        - Save and Load Configurations
            - Allow users to save their selected recipes, parts, and target quantities into configurations that they can load later.
        - Machine and Resource Calculations
            - Add summaries for the required machines and resource supply/demand at the bottom of the tree.
        - Export Tree Data
            - Allow exporting the dependency tree (e.g., as JSON, CSV, or a downloadable PDF).
    DONE:
        - #DONE - Fix Logout button in the header. It's not working. 
        - #DONE - Visualization of Dependency Tree
            Use a tree graph (e.g., D3.js, react-tree-graph, or MUI X TreeView) to visually display the tree structure instead of the current table. This will help users better understand relationships.
        - #DONE - Interactive Filtering (updated all tables to MUI X DataGrid)
            #- Added interactive filtering to the tables to allow users to search, sort, and filter the data.
        - #DONE - Collapsible Tree Nodes
        #  Add the ability to collapse/expand all/individual nodes of the tree for better usability.   
    






    
