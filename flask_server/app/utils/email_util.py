from flask_mail import Message
from flask import render_template, current_app
from app import mail
from ..logging_util import setup_logger
import os
import importlib.util

base_path = os.path.abspath(os.path.join(os.path.dirname(__file__)))
print(f"INIT Base path: {base_path}")
    
config_path = os.path.join(base_path, "../config.py")
print(f"INIT Loading config from: {config_path}")

# Load the config module dynamically
spec = importlib.util.spec_from_file_location("config", config_path)
config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(config)

logger = setup_logger("send_email")

def send_email(to, subject, template_name, context={}, plain_override=None, html_only=False, headers=None, sender=None):
    MAIL_DEFAULT_SENDER = os.getenv("MAIL_DEFAULT_SENDER")
    SYSTEM_TEST_USER_EMAIL = os.getenv("SYSTEM_TEST_USER_EMAIL")
    SYSTEM_TEST_NEW_USER_EMAIL = os.getenv("SYSTEM_TEST_NEW_USER_EMAIL")

    if not sender:
        sender = MAIL_DEFAULT_SENDER

    try:
        with current_app.app_context():
            # Render templates
            if template_name:
                text_body = render_template(f"emails/{template_name}.txt", **context)
                html_body = render_template(f"emails/{template_name}.html", **context)
            else:
                text_body = plain_override
                html_body = None

            data = {
                "from": sender,
                "to": [to],
                "subject": subject,
            }
            if headers:
                for key, value in headers.items():
                    data[f"h:{key}"] = value

            # Modify subject and body for automated testing so the AI classifies them correctly
            if SYSTEM_TEST_USER_EMAIL or SYSTEM_TEST_NEW_USER_EMAIL in [to]:
                subject="Automated System Test:" + " - " + subject
                text_body="This email is generated by the Automated System Test process. Admin to verify results and archive." + "\n\n" + text_body
                html_body="This email is generated by the Automated System Test process. Admin to verify results and archive." + "<br>" + html_body
            

            msg = Message(
                subject=subject,
                sender=sender,
                recipients=[to],
                body=text_body if not html_only else None,
                html=html_body
            )
            
            mail.send(msg)
            logger.info(f"✅ Email sent to {to} with subject: {subject}")
            return True
    except Exception as e:
        logger.error(f"❌ Failed to send email to {to}: {e}")
        return False
