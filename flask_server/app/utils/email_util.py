import boto3
import os
import json
import importlib.util
from flask import render_template, current_app
from ..logging_util import setup_logger


logger = setup_logger("send_email")
# Load config
base_path = os.path.abspath(os.path.join(os.path.dirname(__file__)))
config_path = os.path.join(base_path, "../config.py")
spec = importlib.util.spec_from_file_location("config", config_path)
config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(config)

# Load environment variables
MAIL_DEFAULT_SENDER = config.MAIL_DEFAULT_SENDER
SYSTEM_TEST_USER_EMAIL = config.SYSTEM_TEST_USER_EMAIL
SYSTEM_TEST_NEW_USER_EMAIL = config.SYSTEM_TEST_NEW_USER_EMAIL
RUN_MODE = config.RUN_MODE

# Initialize SES client
ses = boto3.client(
    "ses",
    region_name=os.getenv("AWS_REGION", "eu-west-1"),
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY")
)

def send_email(to, subject, template_name=None, context={}, plain_override=None, html_only=False, headers=None, sender=None):
    if not sender:
        sender = MAIL_DEFAULT_SENDER
    try:
        with current_app.app_context():
            # Render email body
            if template_name:
                text_body = render_template(f"emails/{template_name}.txt", **context)
                html_body = render_template(f"emails/{template_name}.html", **context)
            else:
                text_body = plain_override or ""
                html_body = ""

            # Add system test message tagging
            if SYSTEM_TEST_USER_EMAIL or SYSTEM_TEST_NEW_USER_EMAIL in [to]:
                subject = f"Automated System Test: - {subject}"
                test_note = "This email is generated by the Automated System Test process. Admin to verify results and archive.\n\n"
                text_body = test_note + text_body
                html_body = test_note.replace("\n", "<br>") + html_body

            # Apply environment-based subdomain suffix to email addresses        
            to = apply_env_suffix([to], RUN_MODE)
            sender = apply_env_suffix(sender, RUN_MODE)

            # Build email structure
            ses_params = {
                "Source": sender,
                "Destination": {"ToAddresses": [to]},
                "Message": {
                    "Subject": {"Data": subject},
                    "Body": {}
                }
            }

            if html_only and html_body:
                ses_params["Message"]["Body"]["Html"] = {"Data": html_body}
            else:
                ses_params["Message"]["Body"]["Text"] = {"Data": text_body}
                if html_body:
                    ses_params["Message"]["Body"]["Html"] = {"Data": html_body}

            # Optional headers
            if headers:
                logger.warning("SES send_email does not support custom headers directly.")

            # Send email
            response = ses.send_email(**ses_params)
            logger.info(f"✅ Email sent to {to} with SES Message ID: {response['MessageId']}")
            return True

    except Exception as e:
        logger.error(f"❌ Failed to send email to {to}, Error: {e}")
        return False

def apply_env_suffix(addresses, run_mode):
    """
    Applies environment-based subdomain suffix to email addresses 
    in the satisfactorytracker.com domain only.
    Supports single string or list input.
    """
    if isinstance(addresses, str):
        addresses = [addresses]

    modified = []
    for address in addresses:
        if not address or "@" not in address:
            modified.append(address)
            continue

        local_part, domain = address.split("@")

        if domain == "satisfactorytracker.com":
            if run_mode == "dev":
                modified.append(f"{local_part}@dev.{domain}")
            elif run_mode == "qas":
                modified.append(f"{local_part}@qas.{domain}")
            else:
                modified.append(address)
        else:
            modified.append(address)  # external domains left untouched
    
    logger.debug(f"Modified email addresses: {modified}")
    
    return modified if len(modified) > 1 else modified[0]